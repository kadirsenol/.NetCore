// <auto-generated />
using System;
using Cinema.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cinema.Migrations.SinemaNpgSql
{
    [DbContext(typeof(SinemaNpgSqlContext))]
    [Migration("20240217005933_createDb")]
    partial class createDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AktorFilm", b =>
                {
                    b.Property<int>("AktorlerId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmlerId")
                        .HasColumnType("integer");

                    b.HasKey("AktorlerId", "FilmlerId");

                    b.HasIndex("FilmlerId");

                    b.ToTable("AktorFilm");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Aktor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Yas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Aktorler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Bilet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("SalonId")
                        .HasColumnType("integer");

                    b.Property<int>("SeansId")
                        .HasColumnType("integer");

                    b.Property<int>("SenasId")
                        .HasColumnType("integer");

                    b.Property<int>("TarihId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SeansId");

                    b.HasIndex("TarihId");

                    b.ToTable("Biletler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilmAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Sure")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Filmler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("KategoriName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Kapasite")
                        .HasColumnType("integer");

                    b.Property<string>("SalonAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Salonlar");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Seans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SeansSaat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Seanslar");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Tarih", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("GosterimTarihi")
                        .HasColumnType("date");

                    b.Property<DateOnly>("VizyonaGirisTarihi")
                        .HasColumnType("date");

                    b.Property<DateOnly>("VizyondanCikisTarihi")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Tarihler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Yonetmen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Yas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Yonetmenler");
                });

            modelBuilder.Entity("FilmKategori", b =>
                {
                    b.Property<int>("FilmlerId")
                        .HasColumnType("integer");

                    b.Property<int>("KategorilerId")
                        .HasColumnType("integer");

                    b.HasKey("FilmlerId", "KategorilerId");

                    b.HasIndex("KategorilerId");

                    b.ToTable("FilmKategori");
                });

            modelBuilder.Entity("FilmYonetmen", b =>
                {
                    b.Property<int>("FilmlerId")
                        .HasColumnType("integer");

                    b.Property<int>("YonetmenlerId")
                        .HasColumnType("integer");

                    b.HasKey("FilmlerId", "YonetmenlerId");

                    b.HasIndex("YonetmenlerId");

                    b.ToTable("FilmYonetmen");
                });

            modelBuilder.Entity("AktorFilm", b =>
                {
                    b.HasOne("Cinema.Entity.Concrete.Aktor", null)
                        .WithMany()
                        .HasForeignKey("AktorlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Bilet", b =>
                {
                    b.HasOne("Cinema.Entity.Concrete.Film", "Film")
                        .WithMany("Biletler")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Salon", "Salon")
                        .WithMany("Biletler")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Seans", "Seans")
                        .WithMany("Biletler")
                        .HasForeignKey("SeansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Tarih", "Tarih")
                        .WithMany("Biletler")
                        .HasForeignKey("TarihId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Salon");

                    b.Navigation("Seans");

                    b.Navigation("Tarih");
                });

            modelBuilder.Entity("FilmKategori", b =>
                {
                    b.HasOne("Cinema.Entity.Concrete.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Kategori", null)
                        .WithMany()
                        .HasForeignKey("KategorilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmYonetmen", b =>
                {
                    b.HasOne("Cinema.Entity.Concrete.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Entity.Concrete.Yonetmen", null)
                        .WithMany()
                        .HasForeignKey("YonetmenlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Film", b =>
                {
                    b.Navigation("Biletler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Salon", b =>
                {
                    b.Navigation("Biletler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Seans", b =>
                {
                    b.Navigation("Biletler");
                });

            modelBuilder.Entity("Cinema.Entity.Concrete.Tarih", b =>
                {
                    b.Navigation("Biletler");
                });
#pragma warning restore 612, 618
        }
    }
}
